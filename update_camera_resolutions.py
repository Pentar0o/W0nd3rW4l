#!/usr/bin/env python3
"""
Script pour mettre √† jour automatiquement les r√©solutions des cam√©ras
en interrogeant directement les cam√©ras Axis
"""

import json
import sys
import os
import requests
from requests.auth import HTTPDigestAuth
import urllib3
from typing import List, Dict, Optional
import argparse

# D√©sactiver les warnings SSL pour les tests
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class CameraResolutionUpdater:
    def __init__(self, cameras_file: str = 'cameras.json'):
        self.cameras_file = cameras_file
        self.cameras_data = None
        self.updated_count = 0
        self.failed_cameras = []
    
    def load_cameras(self) -> bool:
        """Charge le fichier de configuration des cam√©ras"""
        try:
            with open(self.cameras_file, 'r', encoding='utf-8') as f:
                self.cameras_data = json.load(f)
            print(f"‚úÖ Fichier {self.cameras_file} charg√© avec succ√®s")
            print(f"   {len(self.cameras_data.get('cameras', []))} cam√©ras trouv√©es")
            return True
        except FileNotFoundError:
            print(f"‚ùå Fichier {self.cameras_file} non trouv√©")
            return False
        except json.JSONDecodeError as e:
            print(f"‚ùå Erreur de parsing JSON: {e}")
            return False
    
    def save_cameras(self, backup: bool = True) -> bool:
        """Sauvegarde le fichier de configuration des cam√©ras"""
        try:
            # Cr√©er le r√©pertoire cameras s'il n'existe pas
            cameras_dir = os.path.dirname(self.cameras_file)
            if cameras_dir and not os.path.exists(cameras_dir):
                os.makedirs(cameras_dir)
                print(f"üìÅ R√©pertoire {cameras_dir} cr√©√©")
            
            # Faire une sauvegarde si demand√©
            if backup and os.path.exists(self.cameras_file):
                backup_file = f"{self.cameras_file}.backup"
                with open(self.cameras_file, 'r') as f_in:
                    with open(backup_file, 'w') as f_out:
                        f_out.write(f_in.read())
                print(f"üìÅ Sauvegarde cr√©√©e: {backup_file}")
            
            # Si on sauvegarde depuis la racine vers cameras/
            if self.cameras_file == 'cameras.json' and os.path.exists('cameras'):
                target_file = 'cameras/cameras.json'
                with open(target_file, 'w', encoding='utf-8') as f:
                    json.dump(self.cameras_data, f, indent=4, ensure_ascii=False)
                print(f"‚úÖ Fichier sauvegard√© dans {target_file}")
                # Supprimer l'ancien fichier √† la racine
                if os.path.exists('cameras.json'):
                    os.remove('cameras.json')
                    print(f"üóëÔ∏è  Ancien fichier cameras.json supprim√© de la racine")
            else:
                # Sauvegarde normale
                with open(self.cameras_file, 'w', encoding='utf-8') as f:
                    json.dump(self.cameras_data, f, indent=4, ensure_ascii=False)
                print(f"‚úÖ Fichier {self.cameras_file} mis √† jour avec succ√®s")
            
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde: {e}")
            return False
    
    def test_camera_connection(self, camera: Dict) -> Optional[str]:
        """Teste la connexion √† une cam√©ra et retourne le protocole qui fonctionne"""
        ip = camera.get('ip')
        login = camera.get('login', 'root')
        password = camera.get('password', '')
        
        for protocol in ['http', 'https']:
            url = f"{protocol}://{ip}/axis-cgi/basicdeviceinfo.cgi"
            
            try:
                response = requests.get(
                    url,
                    auth=HTTPDigestAuth(login, password),
                    timeout=5,
                    verify=False
                )
                
                if response.status_code == 200:
                    return protocol
                    
            except Exception:
                continue
        
        return None
    
    def get_camera_resolutions(self, camera: Dict, protocol: str) -> Optional[List[str]]:
        """R√©cup√®re les r√©solutions disponibles d'une cam√©ra"""
        ip = camera.get('ip')
        login = camera.get('login', 'root')
        password = camera.get('password', '')
        
        url = f"{protocol}://{ip}/axis-cgi/param.cgi?action=list&group=Properties.Image.Resolution"
        
        try:
            response = requests.get(
                url,
                auth=HTTPDigestAuth(login, password),
                timeout=10,
                verify=False
            )
            
            if response.status_code == 200:
                content = response.text.strip()
                
                # Parser les r√©solutions
                if '=' in content and 'Properties.Image.Resolution' in content:
                    res_string = content.split('=', 1)[1]
                    all_resolutions = [r.strip() for r in res_string.split(',')]
                    
                    # Filtrer les r√©solutions 16:9
                    resolutions_16_9 = []
                    for res in all_resolutions:
                        if 'x' in res:
                            try:
                                w, h = res.split('x')
                                w, h = int(w), int(h)
                                ratio = w / h
                                
                                # V√©rifier si c'est du 16:9 (avec une tol√©rance)
                                if abs(ratio - 16/9) < 0.02:
                                    resolutions_16_9.append(res)
                            except ValueError:
                                continue
                    
                    # Trier par r√©solution d√©croissante
                    resolutions_16_9.sort(key=lambda r: int(r.split('x')[0]), reverse=True)
                    
                    return resolutions_16_9
                
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la r√©cup√©ration: {e}")
        
        return None
    
    def update_camera(self, camera: Dict, index: int) -> bool:
        """Met √† jour les r√©solutions d'une cam√©ra"""
        name = camera.get('name', f"Camera {index+1}")
        ip = camera.get('ip', 'unknown')
        
        print(f"\nüì∑ Traitement de {name} ({ip})...")
        
        # Tester la connexion
        protocol = self.test_camera_connection(camera)
        if not protocol:
            print(f"   ‚ùå Impossible de se connecter √† la cam√©ra")
            self.failed_cameras.append(name)
            return False
        
        print(f"   ‚úÖ Connexion √©tablie en {protocol.upper()}")
        
        # R√©cup√©rer les r√©solutions
        resolutions = self.get_camera_resolutions(camera, protocol)
        if not resolutions:
            print(f"   ‚ùå Impossible de r√©cup√©rer les r√©solutions")
            self.failed_cameras.append(name)
            return False
        
        print(f"   ‚úÖ {len(resolutions)} r√©solutions 16:9 trouv√©es")
        
        # Mettre √† jour la cam√©ra
        camera['supported_resolutions'] = resolutions
        
        # V√©rifier et ajuster la r√©solution de stream si n√©cessaire
        current_res = camera.get('stream_resolution', '')
        if current_res not in resolutions:
            # Choisir une r√©solution par d√©faut (640x360 ou la plus basse disponible)
            default_res = '640x360'
            if default_res in resolutions:
                camera['stream_resolution'] = default_res
            elif resolutions:
                camera['stream_resolution'] = resolutions[-1]  # La plus basse
                print(f"   ‚ö†Ô∏è  R√©solution de stream ajust√©e √† {camera['stream_resolution']}")
        
        print(f"   üìù R√©solutions 16:9: {', '.join(resolutions[:3])}{'...' if len(resolutions) > 3 else ''}")
        
        self.updated_count += 1
        return True
    
    def update_all_cameras(self) -> None:
        """Met √† jour toutes les cam√©ras"""
        cameras = self.cameras_data.get('cameras', [])
        
        print(f"\nüîÑ Mise √† jour des r√©solutions pour {len(cameras)} cam√©ras...")
        print("="*60)
        
        for i, camera in enumerate(cameras):
            self.update_camera(camera, i)
        
        print("\n" + "="*60)
        print("üìä R√âSUM√â:")
        print(f"   ‚úÖ Cam√©ras mises √† jour: {self.updated_count}/{len(cameras)}")
        
        if self.failed_cameras:
            print(f"   ‚ùå Cam√©ras en √©chec: {', '.join(self.failed_cameras)}")
        
        if self.updated_count > 0:
            print(f"\nüíæ Sauvegarde des modifications...")
            if self.save_cameras():
                print("‚úÖ Mise √† jour termin√©e avec succ√®s!")
            else:
                print("‚ùå Erreur lors de la sauvegarde")
        else:
            print("\n‚ö†Ô∏è  Aucune cam√©ra mise √† jour")


def main():
    parser = argparse.ArgumentParser(
        description="Met √† jour automatiquement les r√©solutions des cam√©ras Axis"
    )
    parser.add_argument(
        '--file', '-f',
        default='cameras/cameras.json',
        help='Fichier JSON des cam√©ras (d√©faut: cameras/cameras.json)'
    )
    parser.add_argument(
        '--no-backup',
        action='store_true',
        help='Ne pas cr√©er de sauvegarde du fichier original'
    )
    
    args = parser.parse_args()
    
    print("üé• MISE √Ä JOUR AUTOMATIQUE DES R√âSOLUTIONS CAM√âRAS")
    print("="*60)
    
    updater = CameraResolutionUpdater(args.file)
    
    # Charger les cam√©ras
    if not updater.load_cameras():
        sys.exit(1)
    
    # Mettre √† jour toutes les cam√©ras
    updater.update_all_cameras()


if __name__ == "__main__":
    main()